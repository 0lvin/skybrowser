diff --git a/gtkhtml/gtkhtml.c b/gtkhtml/gtkhtml.c
index cc168b2..89ad354 100644
--- a/gtkhtml/gtkhtml.c
+++ b/gtkhtml/gtkhtml.c
@@ -200,6 +200,11 @@ static void	gtk_html_adjust_cursor_position (GtkHTML *html);
 static gboolean any_has_cursor_moved (GtkHTML *html);
 static gboolean any_has_skip_update_cursor (GtkHTML *html);
 
+static gchar * decode (const gchar * token);
+static void link_cliked(GtkHTML *html, gchar *url);
+static gchar * get_data_url (const gchar * action, gsize * length, gchar ** contentType);
+static void get_data_url_content(GtkHTML * html, GtkHTMLStream * stream, const gchar* url);
+
 /* Interval for scrolling during selection.  */
 #define SCROLL_TIMEOUT_INTERVAL 10
 
@@ -483,6 +488,116 @@ html_engine_load_done_cb (HTMLEngine *engine, gpointer data)
 	g_signal_emit (gtk_html, signals[LOAD_DONE], 0);
 }
 
+/*unescape url*/
+static gchar *
+decode(const gchar * token)
+{
+    const gchar *full_pos;
+    gchar *resulted;
+    gchar *write_pos;
+    const gchar *read_pos;
+
+    if (token == NULL)
+		return NULL;
+
+    /*stop pointer */
+    full_pos = token + strlen (token);
+    resulted = g_new (gchar, strlen(token) + 1);
+    write_pos = resulted;
+    read_pos = token;
+    while (read_pos < full_pos) {
+	size_t count_chars = strcspn (read_pos, "%");
+
+	memcpy (write_pos, read_pos, count_chars);
+	write_pos += count_chars;
+	read_pos += count_chars;
+	/*may be end string? */
+	if (read_pos < full_pos)
+	    if (*read_pos == '%') {
+		/*skip not needed % */
+		read_pos++;
+		if (*(read_pos) != 0)
+		    if (*(read_pos + 1) != 0) {
+				gchar save[3];
+				save[0] = *read_pos;
+				save[1] = *(read_pos + 1);
+				save[2] = 0;
+				(*write_pos) = strtol (save, NULL, 16);
+				write_pos += 1;
+				read_pos += 2;
+		    }
+	    }
+    }
+    *write_pos = 0;
+    return resulted;
+}
+
+static gchar*
+get_data_url (const gchar * action, gsize * length, gchar ** contentType) {
+	guchar *buf = NULL;
+	g_return_val_if_fail (action != NULL, NULL);
+	g_return_val_if_fail (length != NULL, NULL);
+	g_return_val_if_fail (contentType != NULL, NULL);
+	if (!strncmp(action, "data:", 5 /*strlen("data:")*/)) {
+		const gchar *real_action = action + 5 /*strlen("data:")*/;
+		/*find first ','*/
+		const gchar *start_data = strchr(real_action, ',');
+		if (start_data != NULL) {
+			gboolean isbase64 = FALSE;
+			const char *endcontent = start_data;
+			gchar *result_decode = NULL;
+			/* is base 64?*/
+			if ( (start_data - real_action) > 7 ) /*8 == strlen(";base64,")*/
+				if (!strncmp(start_data - 7, ";base64",  7)) {
+					isbase64 = TRUE;
+					endcontent -= 7;
+				}
+			/* get content type */
+			{
+				gsize ContentType_length = endcontent - real_action;
+				*contentType = g_new(gchar, ContentType_length + 1);
+				memcpy(*contentType, real_action, ContentType_length);
+				*(*contentType + ContentType_length) = 0;
+			}
+			/*unescape content*/
+			result_decode = decode(start_data + 1); /* skip ','*/
+			*length = strlen( result_decode );
+			if (isbase64) {
+				gint state = 0;
+				guint save = 0;				
+				buf = g_new(guchar,( (*length) * 3) / 4 + 3);
+				*length = g_base64_decode_step(result_decode,
+					       strlen(result_decode),
+					       buf, &state, &save);
+			} else {
+				buf = g_new(guchar, (*length) + 1);
+				buf [*length] = 0;
+				memcpy(buf, result_decode, *length);
+			}
+			g_free(result_decode);			
+		}
+    }
+    return (gchar *)buf;	
+}
+
+static void
+get_data_url_content(GtkHTML * html, GtkHTMLStream * stream, const gchar* url) {
+	gsize length = 0;
+	gchar *ContentType = NULL;
+	gchar *buf = NULL;
+	buf = get_data_url (url, &length, &ContentType);
+	if (buf!= NULL) {
+		if (ContentType!=NULL) {
+			gtk_html_set_default_content_type (html, ContentType);
+			g_free (ContentType);
+		}
+		gtk_html_write (html, stream, buf, length);
+		gtk_html_end (html, stream, GTK_HTML_STREAM_OK);
+		g_free (buf);
+	} else
+		gtk_html_end (html, stream, GTK_HTML_STREAM_ERROR);
+}
+
 static void
 html_engine_url_requested_cb (HTMLEngine *engine,
 			      const gchar *url,
@@ -491,14 +606,22 @@ html_engine_url_requested_cb (HTMLEngine *engine,
 {
 	GtkHTML *gtk_html;
 	char *expanded = NULL;
+	
+	if (!url)
+		return;
+		
 	gtk_html = GTK_HTML (data);
 
 	if (engine->stopped)
 		return;
 
-	expanded = gtk_html_get_url_base_relative (gtk_html, url);
-	g_signal_emit (gtk_html, signals[URL_REQUESTED], 0, expanded, handle);
-	g_free (expanded);
+	if (!strncmp (url, "data:", 5)) {
+		get_data_url_content( gtk_html, handle, url);
+	} else {
+		expanded = gtk_html_get_url_base_relative (gtk_html, url);
+		g_signal_emit (gtk_html, signals[URL_REQUESTED], 0, expanded, handle);
+		g_free (expanded);
+	}
 }
 
 static void
@@ -1031,6 +1154,21 @@ update_mouse_cursor (GtkWidget *widget, guint state)
 	motion_notify_event (widget, &event);
 }
 
+static void
+link_cliked(GtkHTML *html, gchar *url) {
+	
+	if (!url)
+		return;
+		
+	if (!strncmp (url, "data:", 5)) {
+		GtkHTMLStream *stream;
+		stream = gtk_html_begin_content(html, "");
+		get_data_url_content( html,stream, url);
+		
+	} else	
+		g_signal_emit (html, signals [LINK_CLICKED], 0, url);
+}
+
 static gint
 key_press_event (GtkWidget *widget, GdkEventKey *event)
 {
@@ -1096,7 +1234,7 @@ key_press_event (GtkWidget *widget, GdkEventKey *event)
 					/* printf ("link clicked: %s\n", url); */
                                         if (HTML_IS_TEXT(focus_object)) {
 						html_text_set_link_visited (HTML_TEXT (focus_object), focus_object_offset, html->engine, TRUE);
-					g_signal_emit (html, signals [LINK_CLICKED], 0, url);
+					link_cliked (html, url);
 					}
 					g_free (url);
 				}
@@ -2063,7 +2201,7 @@ button_release_event (GtkWidget *initial_widget,
 		if (!html->priv->dnd_in_progress
 		    && html->pointer_url != NULL && ! html->in_selection
 		    && (!gtk_html_get_editable (html) || html->priv->in_url_test_mode)) {
-			g_signal_emit (widget,  signals[LINK_CLICKED], 0, html->pointer_url);
+			link_cliked (GTK_HTML (widget), html->pointer_url);
 			focus_object = html_engine_get_focus_object (html->engine, &focus_object_offset);
 			if (HTML_IS_TEXT(focus_object)) {
 				html_text_set_link_visited (HTML_TEXT(focus_object), focus_object_offset, html->engine, TRUE);
